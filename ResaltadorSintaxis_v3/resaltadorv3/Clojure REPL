REPL Instructions

Code can be entered at the bottom and executed by pressing shift+enter.

Try it now by typing (+ 1 1) in the bottom section and pressing shift+enter.

Working in another Clojure file and sending forms to the REPL is the most efficient way to work. Use the following key bindings to send code to the REPL. See the settings for more keybindings.

ctrl-alt-, then b
Execute block. Finds the block of Clojure code your cursor is in and executes that.

ctrl-alt-, s
Executes the selection. Sends the selected text to the REPL.

You can disable this help text in the settings.
Starting REPL with lein in /Users/carla/Documents/ITC-Tec/Ago-Dic21/IMECO_Compu/IMECO_4to/ResaltadorSintaxis_v3/resaltadorv3
#error {
 :cause cond requires an even number of forms
 :via
 [{:type clojure.lang.Compiler$CompilerException
   :message Syntax error macroexpanding clojure.core/cond at (resaltadorv3/core.clj:86:2).
   :data #:clojure.error{:phase :macro-syntax-check, :line 86, :column 2, :source resaltadorv3/core.clj, :symbol clojure.core/cond}
   :at [clojure.lang.Compiler macroexpand1 Compiler.java 7014]}
  {:type java.lang.IllegalArgumentException
   :message cond requires an even number of forms
   :at [clojure.core$cond invokeStatic core.clj 585]}]
 :trace
 [[clojure.core$cond invokeStatic core.clj 585]
  [clojure.core$cond doInvoke core.clj 576]
  [clojure.lang.RestFn applyTo RestFn.java 142]
  [clojure.lang.Var applyTo Var.java 705]
  [clojure.lang.Compiler macroexpand1 Compiler.java 6997]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7097]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyze Compiler.java 6749]
  [clojure.lang.Compiler$IfExpr$Parser parse Compiler.java 2841]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7111]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7099]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyze Compiler.java 6749]
  [clojure.lang.Compiler$IfExpr$Parser parse Compiler.java 2841]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7111]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7099]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyze Compiler.java 6749]
  [clojure.lang.Compiler$IfExpr$Parser parse Compiler.java 2841]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7111]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7099]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyze Compiler.java 6749]
  [clojure.lang.Compiler$IfExpr$Parser parse Compiler.java 2841]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7111]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7099]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyze Compiler.java 6749]
  [clojure.lang.Compiler$IfExpr$Parser parse Compiler.java 2841]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7111]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7099]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyze Compiler.java 6749]
  [clojure.lang.Compiler$IfExpr$Parser parse Compiler.java 2841]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7111]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7099]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyze Compiler.java 6749]
  [clojure.lang.Compiler$IfExpr$Parser parse Compiler.java 2841]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7111]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7099]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyze Compiler.java 6749]
  [clojure.lang.Compiler$IfExpr$Parser parse Compiler.java 2841]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7111]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7099]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyze Compiler.java 6749]
  [clojure.lang.Compiler$IfExpr$Parser parse Compiler.java 2841]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7111]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7099]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyze Compiler.java 6749]
  [clojure.lang.Compiler$BodyExpr$Parser parse Compiler.java 6124]
  [clojure.lang.Compiler$FnMethod parse Compiler.java 5471]
  [clojure.lang.Compiler$FnExpr parse Compiler.java 4033]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7109]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7099]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler access$300 Compiler.java 38]
  [clojure.lang.Compiler$DefExpr$Parser parse Compiler.java 596]
  [clojure.lang.Compiler analyzeSeq Compiler.java 7111]
  [clojure.lang.Compiler analyze Compiler.java 6793]
  [clojure.lang.Compiler analyze Compiler.java 6749]
  [clojure.lang.Compiler eval Compiler.java 7185]
  [clojure.lang.Compiler load Compiler.java 7640]
  [clojure.lang.RT loadResourceScript RT.java 381]
  [clojure.lang.RT loadResourceScript RT.java 372]
  [clojure.lang.RT load RT.java 459]
  [clojure.lang.RT load RT.java 424]
  [clojure.core$load$fn__6856 invoke core.clj 6115]
  [clojure.core$load invokeStatic core.clj 6114]
  [clojure.core$load doInvoke core.clj 6098]
  [clojure.lang.RestFn invoke RestFn.java 408]
  [clojure.core$load_one invokeStatic core.clj 5897]
  [clojure.core$load_one invoke core.clj 5892]
  [clojure.core$load_lib$fn__6796 invoke core.clj 5937]
  [clojure.core$load_lib invokeStatic core.clj 5936]
  [clojure.core$load_lib doInvoke core.clj 5917]
  [clojure.lang.RestFn applyTo RestFn.java 142]
  [clojure.core$apply invokeStatic core.clj 669]
  [clojure.core$load_libs invokeStatic core.clj 5974]
  [clojure.core$load_libs doInvoke core.clj 5958]
  [clojure.lang.RestFn applyTo RestFn.java 137]
  [clojure.core$apply invokeStatic core.clj 669]
  [clojure.core$require invokeStatic core.clj 5996]
  [clojure.core$require doInvoke core.clj 5996]
  [clojure.lang.RestFn invoke RestFn.java 408]
  [user$eval5 invokeStatic form-init11501920844661285472.clj 1]
  [user$eval5 invoke form-init11501920844661285472.clj 1]
  [clojure.lang.Compiler eval Compiler.java 7181]
  [clojure.lang.Compiler eval Compiler.java 7170]
  [clojure.lang.Compiler eval Compiler.java 7170]
  [clojure.lang.Compiler load Compil
er.java 7640]
  [clojure.lang.Compiler loadFile Compiler.java 7578]
  [clojure.main$load_script invokeStatic main.clj 475]
  [clojure.main$init_opt invokeStatic main.clj 477]
  [clojure.main$init_opt invoke main.clj 477]
  [clojure.main$initialize invokeStatic main.clj 508]
  [clojure.main$null_opt invokeStatic main.clj 542]
  [clojure.main$null_opt invoke main.clj 539]
  [clojure.main$main invokeStatic main.clj 664]
  [clojure.main$main doInvoke main.clj 616]
  [clojure.lang.RestFn applyTo RestFn.java 137]
  [clojure.lang.Var applyTo Var.java 705]
  [clojure.main main main.java 40]]}
nREPL server started on port 59627 on host 127.0.0.1 - nrepl://127.0.0.1:59627
Refreshing code...
:reloading (resaltadorv3.core resaltadorv3.core-test)
:error-while-loading resaltadorv3.core
Syntax error macroexpanding clojure.core/cond at (resaltadorv3/core.clj:86:2).
Refresh complete
Refreshing code...
No user namespace defined. Defaulting to clojure.tools.namespace.repl/refresh.

:reloading (resaltadorv3.core resaltadorv3.core-test)
Refresh complete
(in-ns 'resaltadorv3.core)
resaltadorv3.core=>
[clojure.lang.Namespace 323656322 "resaltadorv3.core"]
resaltadorv3.core=>
nil
Refreshing code...
No user namespace defined. Defaulting to clojure.tools.namespace.repl/refresh.

:reloading (resaltadorv3.core resaltadorv3.core-test)
Refresh complete
(mainSecuencial)
resaltadorv3.core=>
(nil)
Refreshing code...
No user namespace defined. Defaulting to clojure.tools.namespace.repl/refresh.

:reloading (resaltadorv3.core resaltadorv3.core-test)
Refresh complete
(mainSecuencial)
resaltadorv3.core=>
(nil)
Refreshing code...
No user namespace defined. Defaulting to clojure.tools.namespace.repl/refresh.

:reloading (resaltadorv3.core resaltadorv3.core-test)
Refresh complete
(mainSecuencial)
resaltadorv3.core=>
(nil)
Refreshing code...
No user namespace defined. Defaulting to clojure.tools.namespace.repl/refresh.

:reloading (resaltadorv3.core resaltadorv3.core-test)
Refresh complete
(mainSecuencial)
resaltadorv3.core=>
(nil)
Refreshing code...
No user namespace defined. Defaulting to clojure.tools.namespace.repl/refresh.

:reloading (resaltadorv3.core resaltadorv3.core-test)
Refresh complete
(mainSecuencial)
resaltadorv3.core=>
(nil)
--------------------
