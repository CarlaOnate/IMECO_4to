#lang racket


;Guardar el archivo en una lista separado por caracteres
(define fileToList (lambda (char lista) ;O(n) -> cicla todo un archivo de n caracteres
                    (cond
                     ((eof-object? (peek-char arch)) (append lista (list char)))
                     (else (fileToList (read-char arch) (append lista (list char)))))))

;Cosas globales
(define estados* '(101 102 105 209))
(define reservedWords '("println" "def" "if" "cond" "defn" "fn" "else" "true" "false" "nil" "cons" "first" "second" "rest" "next"
                                  "concat" "map" "apply" "filter" "reduce" "pmap" "let" "seq" "conj" "do" "and" "or" "not" "not=" "quote"
                                  "empty?" "take" "range" "doall" "time" "future" "delay" "promise"))

(define arch (open-input-file "c:\\datos.txt")) ; arbir archivo
(define listFile (fileToList (read-char arch) '())) ; lista con todo el archivo
(close-input-port arch)
(define outFile (open-output-file "c:\\datos.html" #:exists 'replace))


;lista transiciones
(define transiciones '((0 #\space 0) (0 #\newline 201) (0 "number" 1) (1 "number" 1) (1 "letter-e" 101) (1 #\e 101) (1 "special" 101) (1 "parenthesis" 101)
                       (1 #\< 101) (1 #\= 101) (1 #\> 101) (1 #\; 101) (1 #\space 101) (1 #\newline 101) 
                       (1 #\. 2) (2 "number" 2) (2 "letter-e" 102) (2 "special" 102) (2 "parenthesis" 102) (2 #\space 102) (2 #\newline 102) (2 #\e 3)
                       (3 "number" 103)
                       (0 #\" 4) (4 "letter-e" 4) (4 #\e 4) (4 "number" 4) (4 #\space 4) (4 "special" 4) (4 "parenthesis" 104) (4 #\" 104)
                       (0 "letter-e" 5) (0 #\e 5) (5 "letter-e" 5) (5 #\e 5) (5 "number" 5) (5 "special" 5) (5 "parenthesis" 105) (5 #\space 105)
                       (5 #\; 105) (5 #\. 105) (5 #\newline 105)
                       (0 #\; 6) (6 #\; 6) (6 "letter-e" 6) (6 #\e 6) (6 "number" 6) (6 #\" 6) (6 "special" 6) (6 "parenthesis" 6) (6 #\< 6) (6 #\= 6) (6 #\> 6)
                       (6 #\space 6) (6 #\. 6) (6 #\newline 106)
                       (0 #\< 7) (0 #\> 7) (7 #\= 208) (7 "letter-e" 200) (7 #\e 200) (7 "number" 200) (7 "special" 200) (7 "parenthesis" 200) (7 #\space 200)
                       (7 #\newline 200)
                       (0 "special" 200)
                       (0 "parenthesis" 200) (0 #\. 200)))


;transforma el caracter para que lo pueda leer el automata
(define letterToSymbol (lambda (el) ;0(n) por memq
         (cond
           ((pair? (memq el '(#\a #\b #\c #\d #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z #\A #\B #\C #\D #\E
                                  #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z))) "letter-e")
           ((pair? (memq el '(#\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9 #\0))) "number")
           ((pair? (memq el '(#\{ #\} #\[ #\] #\( #\)))) "parenthesis")
           ((pair? (memq el '(#\+ #\- #\* #\/ #\# #\\ #\' #\? #\: #\, #\& #\%))) "special") ;missing ( ) . < > = ; "
           (else el))))


(define estado*? (lambda (state) ; revisa si el estado es determinante ;O(n)
                         (if (pair? (memq (car state) estados*)) #t #f)))


(define findPattern (lambda (file state word res) ;O(n) por ser complejidad mayor dentro de la función res => ((101), (#\c))
                    (cond
                      ;((null? file) res)
                      ((null? file) (writeHTML (append res (list (list (list state) word)) (list (list (list "end")))))) ;O(1)
                      ((= state -1) (findPattern (cdr file) 0 (append word (list (car file))) res)) ;O(1)
                      ((> state 100) (if (pair? (memq state estados*)) ;O(n) por memq
                                         (findPattern (append (list (car (reverse word))) file) 0 '() (append res (list (list (list state) (reverse (cdr (reverse word))))))) ; O(1)
                                         (findPattern file 0 '() (append res (list (list (list state) word)))))) ; O(1)
                      (else (findPattern (cdr file) (followAFD transiciones (letterToSymbol (car file)) state) (append word (list (car file))) res))))) ; O(1)


(define (followAFD afd simbolo estado) ;O(n) - cicla una lista de n elementos
  (cond
    ((null? afd) -1)
    ((pair? (car afd)) (max (followAFD (car afd) simbolo estado) (followAFD (cdr afd) simbolo estado))) ; 2 brances O(2^n)
    ((not (pair? (car afd))) (if (and (eq? (cadr afd) simbolo) (eq? (car afd) estado)) (caddr afd) -1)) ;O(1)
    (else (followAFD (cdr afd) simbolo estado))))


(define reserved? (lambda (word)
                    (pair? (member (list->string (filter (lambda (x) (not (eq? x #\space))) word)) reservedWords))))


;Escribe inicio, lista archiov y final al archivo html
(define writeHTML (lambda (resList)
                        (for-each (lambda (el) ;O(n)
                          (cond
                            ((eq? (caar el) "begin") (writeHead))
                            ((eq? (caar el) "end") (writeEnd))
                            (else (write-string (htmlTag el) outFile)))) resList)))
                    

(define writeHead (lambda () ; O(1)
                    (write-string "<!DOCTYPEhtml>" outFile)
                    (write-string "<html>" outFile)
                    (write-string "<head><title>SuperMegaCoolResaltador</title>" outFile)
                    (write-string "<body style=\"white-space: pre\">" outFile)
                    (write-string "<div><p/>" outFile)))


(define writeEnd (lambda () ;O(1)
                    (write-string "</p></div>" outFile)
                    (write-string "</body>" outFile)
                    (write-string "</html>" outFile)
                    (close-output-port outFile)))

                    
(define htmlTag (lambda (listEl) ; O(1)
                         (cond
                           ((eq? (caar listEl) 101) (string-append "<span style=\"color: red\">" (list->string (cadr listEl)) "</span>"))
                           ((eq? (caar listEl) 102) (string-append "<span style=\"color: green\">" (list->string (cadr listEl)) "</span>"))
                           ((eq? (caar listEl) 103) (string-append "<span style=\"color: orange\">" (list->string (cadr listEl)) "</span>"))
                           ((eq? (caar listEl) 104) (string-append "<span style=\"color: blue\">" (list->string (cadr listEl)) "</span>"))
                           ((eq? (caar listEl) 105) (if (reserved? (cadr listEl))
                                                        (string-append "<span style=\"color:#bd42bd\">" (list->string (cadr listEl)) "</span>")
                                                        (string-append "<span style=\"color:#5da28c\">" (list->string (cadr listEl)) "</span>")))
                           ((eq? (caar listEl) 106) (string-append "<span style=\"color:#1a9fe5\">" (list->string (cadr listEl)) "</span></p><p>"))
                           ((eq? (caar listEl) 200) (string-append "<span style=\"color:#e1931e\">" (if (pair? (cadr listEl))
                                                                                                        (list->string (cadr listEl))
                                                                                                        (string (cadr listEl))) "</span>"))
                           ((eq? (caar listEl) 209) (string-append "<span style=\"color:#e817a2\">" (list->string (if (pair? (cadr listEl))
                                                                                                                      (cadr listEl)
                                                                                                                      (list (cadr listEl)))) "</span>"))
                           ((eq? (caar listEl) 201) "</p><p>")
                           ((and (eq? (caar listEl) -1) (eq? (cadr listEl) #\space)) " ")
                           (else (string-append "<span style=\"color:black\">"(list->string (cadr listEl))"</span>")))))




;Llama función principal como lo necesita
(define main (lambda () ;O(1)
              (findPattern listFile 0 '() '((("begin"))))))

