#lang racket

; Ejemplo automata '(((1 a 1) (1 b 2) (2 b 2))(2))


;lista estados finales
(define estadosFinales '(101 102 103 104 105 106 107 108 109 200 201 202 203 204 205 206 207))
;Funciones que encuentra si el estado es final o no
(define estadoFinal?
  (lambda (estado listaEstados)
    (cond
      ((null? listaEstados) 0)
      ((= estado (car listaEstados)) estado)
      (else (estadoFinal? estado (cdr listaEstados))))))
    


;lista transiciones
(define transiciones '((0 esp 0)
                       (0 number 1)
                       (1 number 1)
                       (1 letter-e 101)
                       (1 e 101)
                       (1 special 101)
                       (1 esp 101)
                       (1 . 2)
                       (2 number 2)
                       (2 letter(e) 102)
                       (2 special 102)
                       (2 esp 102)
                       (2 e 3)
                       (3 number 4)))

(define nextState (lambda (afd simbolo estado) ;funciona bien
  (cond
    ((null? afd) 0)
    ((pair? (car afd)) (max (nextState (car afd) simbolo estado) (nextState (cdr afd) simbolo estado)))
    ((not (pair? (car afd))) (if (and (eq? (cadr afd) simbolo) (eq? (car afd) estado)) (caddr afd) 0))
    (else (nextState (cdr afd) simbolo estado)))))

(define patternNum (lambda (estado)
                  (if (< 0 (estadoFinal? estado estadosFinales)) estado 0)))
                  
(define pattern (lambda (state)
        (cond
          ((= state 101) "int")
          ((= state 201) "float")
          (else "nth"))))


(define searchPattern (lambda (afd )
        (map (pattern) '(number number letter-e))))

                        




; regex
;(define regex '())

;(define symbol
;  (lambda (x) regexp-match? (regexp-matches "[a-df-zA-DF-Z]" x)))




